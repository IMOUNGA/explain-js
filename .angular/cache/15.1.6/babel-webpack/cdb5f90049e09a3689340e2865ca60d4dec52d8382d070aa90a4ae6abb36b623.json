{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { POSITIONS } from \"./Enums/positions\";\nlet NgExplainComponent = class NgExplainComponent {\n  constructor() {\n    this.closeTutorial = new EventEmitter();\n    this.currentStepElementOriginalBorder = '';\n    this.currentStepElementOriginalZindex = '';\n    this.position = 0;\n    this.percent = 0;\n    this.positions = POSITIONS.DEFAULT;\n  }\n  ngOnInit() {\n    this.currentSteps = this.steps[this.position];\n    this.changeCibling();\n  }\n  ngAfterViewInit() {\n    this.initProgressRound();\n  }\n  close() {\n    this.reInitOriginCibling();\n    this.closeTutorial.emit(true);\n  }\n  changeCibling() {\n    this.reInitOriginCibling();\n    this.currentSteps = this.steps[this.position];\n    this.currentStepElement = document.querySelector(this.currentSteps.selector);\n    const currentStepStyle = this.currentStepElement.style;\n    this.currentStepElementOriginalBorder = currentStepStyle.border;\n    this.currentStepElementOriginalZindex = currentStepStyle.zIndex;\n    currentStepStyle.zIndex = '1001';\n  }\n  reInitOriginCibling() {\n    if (this.currentStepElement) {\n      this.currentStepElement.style.border = this.currentStepElementOriginalBorder;\n      this.currentStepElement.style.zIndex = this.currentStepElementOriginalZindex;\n      this.currentStepElement.style.zIndex;\n    }\n  }\n  initProgressRound() {\n    this.rounds = document.querySelectorAll('.progress-round');\n    this.rounds[0].classList.add('active');\n  }\n  nextStep() {\n    if (this.position + 1 < this.steps.length) {\n      this.position++;\n      this.changeCibling();\n      this.progressStepNext();\n    } else {\n      this.close();\n    }\n  }\n  previousStep() {\n    if (this.position - 1 >= 0) {\n      this.progressStepprevious();\n      this.position--;\n      this.changeCibling();\n    }\n  }\n  progressStepNext() {\n    if (this.position < this.rounds.length) {\n      this.rounds[this.position].classList.add('active');\n    }\n  }\n  progressStepprevious() {\n    if (this.position > 0) {\n      this.rounds[this.position].classList.remove('active');\n    }\n  }\n};\n__decorate([ViewChild('progressbar')], NgExplainComponent.prototype, \"progressbar\", void 0);\n__decorate([ViewChild('explain')], NgExplainComponent.prototype, \"explain\", void 0);\n__decorate([Input()], NgExplainComponent.prototype, \"steps\", void 0);\n__decorate([Input()], NgExplainComponent.prototype, \"color\", void 0);\n__decorate([Input()], NgExplainComponent.prototype, \"colorSecondary\", void 0);\n__decorate([Input()], NgExplainComponent.prototype, \"colorText\", void 0);\n__decorate([Output()], NgExplainComponent.prototype, \"closeTutorial\", void 0);\nNgExplainComponent = __decorate([Component({\n  selector: 'ng-explain',\n  template: `\n    <div class=\"ng-explain-wrapper\">\n      <div class=\"overlay\"></div>\n      <div class=\"explain-wrapper\" *ngIf=\"steps\" #explain>\n        <p class=\"explain-close\" (click)=\"close()\">x</p>\n        <div class=\"explain-text-content\">\n          <h3>{{ currentSteps.title }}</h3>\n          <p>{{ currentSteps.desc }}</p>\n        </div>\n        <div class=\"explain-progression-container\">\n          <div class=\"explain-progression-dots\" #progressbar>\n            <div class=\"progress-round\" *ngFor=\"let step of steps; let i = index\"></div>\n          </div>\n          <div class=\"explain-progression-buttons\">\n            <button class=\"btn previous\" \n                    [ngStyle]=\"{'background-color': color, 'color': colorText}\n                    (click)=\"previousStep()\">Précédent</button>\n            <button class=\"btn next\" (click)=\"nextStep()\">Suivant</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: [\"./ng-explain.component.scss\"]\n})], NgExplainComponent);\nexport { NgExplainComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","ViewChild","POSITIONS","NgExplainComponent","constructor","DEFAULT","ngOnInit","currentSteps","steps","position","changeCibling","ngAfterViewInit","initProgressRound","close","reInitOriginCibling","closeTutorial","emit","currentStepElement","document","querySelector","selector","currentStepStyle","style","currentStepElementOriginalBorder","border","currentStepElementOriginalZindex","zIndex","rounds","querySelectorAll","classList","add","nextStep","length","progressStepNext","previousStep","progressStepprevious","remove","__decorate","template","styleUrls"],"sourceRoot":"","sources":["/Users/romann/Sites/Angular-Librarys/explain-js/projects/ng-explain/src/lib/ng-explain.component.ts"],"sourcesContent":["import {AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {POSITIONS} from \"./Enums/positions\";\n\ninterface ISteps {\n  title: string;\n  desc: string;\n  selector: string;\n  photoUrl?: string;\n}\n\n@Component({\n  selector: 'ng-explain',\n  template: `\n    <div class=\"ng-explain-wrapper\">\n      <div class=\"overlay\"></div>\n      <div class=\"explain-wrapper\" *ngIf=\"steps\" #explain>\n        <p class=\"explain-close\" (click)=\"close()\">x</p>\n        <div class=\"explain-text-content\">\n          <h3>{{ currentSteps.title }}</h3>\n          <p>{{ currentSteps.desc }}</p>\n        </div>\n        <div class=\"explain-progression-container\">\n          <div class=\"explain-progression-dots\" #progressbar>\n            <div class=\"progress-round\" *ngFor=\"let step of steps; let i = index\"></div>\n          </div>\n          <div class=\"explain-progression-buttons\">\n            <button class=\"btn previous\" \n                    [ngStyle]=\"{'background-color': color, 'color': colorText}\n                    (click)=\"previousStep()\">Précédent</button>\n            <button class=\"btn next\" (click)=\"nextStep()\">Suivant</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: [\"./ng-explain.component.scss\"]\n})\nexport class NgExplainComponent implements OnInit, AfterViewInit {\n  @ViewChild('progressbar') progressbar!: ElementRef;\n  @ViewChild('explain') explain!: ElementRef;\n\n  @Input() steps!: ISteps[];\n  @Input() color!: string;\n  @Input() colorSecondary!: string;\n  @Input() colorText!: string;\n  @Output() closeTutorial: EventEmitter<boolean> = new EventEmitter();\n\n  currentSteps!: ISteps;\n  currentStepElement!: HTMLElement;\n  currentStepElementOriginalBorder = '';\n  currentStepElementOriginalZindex = '';\n  position = 0;\n  rounds!: NodeListOf<HTMLElement>;\n  percent = 0;\n  positions: POSITIONS = POSITIONS.DEFAULT;\n  elementCibling!: HTMLElement;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.currentSteps = this.steps[this.position];\n    this.changeCibling();\n  }\n\n  ngAfterViewInit(): void {\n    this.initProgressRound();\n  }\n\n  close(): void {\n    this.reInitOriginCibling();\n    this.closeTutorial.emit(true);\n  }\n\n  changeCibling(): void {\n    this.reInitOriginCibling();\n\n    this.currentSteps = this.steps[this.position];\n\n    this.currentStepElement = document.querySelector(this.currentSteps.selector) as HTMLElement;\n    const currentStepStyle = this.currentStepElement.style;\n    this.currentStepElementOriginalBorder = currentStepStyle.border;\n    this.currentStepElementOriginalZindex = currentStepStyle.zIndex;\n    currentStepStyle.zIndex = '1001';\n  }\n\n  reInitOriginCibling(): void {\n    if (this.currentStepElement) {\n      this.currentStepElement.style.border = this.currentStepElementOriginalBorder;\n      this.currentStepElement.style.zIndex = this.currentStepElementOriginalZindex;\n      this.currentStepElement.style.zIndex;\n    }\n  }\n\n  initProgressRound(): void {\n    this.rounds = document.querySelectorAll('.progress-round');\n    this.rounds[0].classList.add('active');\n  }\n\n  nextStep(): void {\n    if ((this.position + 1) < this.steps.length) {\n      this.position++;\n      this.changeCibling();\n      this.progressStepNext();\n    } else {\n      this.close();\n    }\n  }\n\n  previousStep(): void {\n    if ((this.position - 1) >= 0) {\n      this.progressStepprevious();\n      this.position--;\n      this.changeCibling();\n    }\n  }\n\n  progressStepNext(): void {\n    if (this.position < this.rounds.length) {\n      this.rounds[this.position].classList.add('active');\n    }\n  }\n\n  progressStepprevious(): void {\n    if (this.position > 0) {\n      this.rounds[this.position].classList.remove('active');\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}